## 1)

```c
#include <stdio.h>

/*Crie uma fun√ß√£o que recebe como par√¢metro um n√∫mero inteiro e devolve o seu dobro.*/

int dobro(int num);

int main(){
    int num;
    printf("insira um valor inteiro: ");
    scanf("%d",&num);
    printf("drobro = %d\n", dobro(num));
    return 0;
}

int dobro(int a){
    int dobro = a*2;
    return dobro;
}
```

## 2)

```c
#include <stdio.h>

/*Fa√ßa uma fun√ß√£o que receba a data atual (dia, m√™s e ano em inteiro) e exiba-a na tela no
formato textual por extenso. Ex.: Data: 18/11/2022, Imprimir: 18 de novembro de 2022..*/

void data(int dia, int mes,int ano);

int main(){
    int dia, mes, ano;
    printf("insira o dia: ");
    scanf("%d",&dia);
    printf("insira o mes: ");
    scanf("%d",&mes);
    printf("insira o ano: ");
    scanf("%d",&ano);
    data(dia,mes,ano);
    return 0;
}

void data(int dia, int mes, int ano){
    switch (mes) {
    case 1:
        printf("%d de janeiro de %d\n", dia, ano);
        break;
    case 2:
        printf("%d de fevereiro de %d\n", dia, ano);
        break;
    case 3:
        printf("%d de marco de %d\n", dia, ano);
        break;
    case 4:
        printf("%d de abril de %d\n", dia, ano);
        break;
    case 5:
        printf("%d de maio de %d\n", dia, ano);
        break;
    case 6:
        printf("%d de junho de %d\n", dia, ano);
        break;
    case 7:
        printf("%d de julho de %d\n", dia, ano);
        break;
    case 8:
        printf("%d de agosto de %d\n", dia, ano);
        break;
    case 9:
        printf("%d de setembro de %d\n", dia, ano);
        break;
    case 10:
        printf("%d de outubro de %d\n", dia, ano);
        break;
    case 11:
        printf("%d de novembro de %d\n", dia, ano);
        break;
    case 12:
        printf("%d de dezembro de %d\n", dia, ano);
        break;
    default:
        printf("Mes invalido\n");
        break;
    }
}
```

## 3)

```c
#include <stdio.h>

/*Fa√ßa uma fun√ß√£o para verificar se um n√∫mero √© positivo ou negativo. Sendo que o valor de
retorno ser√° 1 se positivo, -1 se negativo e 0 se for igual a 0.*/

int positivoOuNegativo(float num);

int main(){
    float num;
    int sinal;
    printf("insira um valor: ");
    scanf("%f", &num);
    sinal = positivoOuNegativo(num);

    if(sinal == -1){
        printf("O valor %.2f eh negativo\n", num);
    }else if(sinal == 1){
        printf("o valor %.2f eh positivo\n", num);
    }else{
        printf("O valor eh 0\n");
    }
    return 0;
}

int positivoOuNegativo(float num){
    if(num < 0){
        return -1;
    }else if(num > 0){
        return 1;
    }else{
        return 0;
    }
}
```

## 4)

```c
#include <stdio.h>
#include <math.h>

/*Fa√ßa uma fun√ß√£o para verificar se um n√∫mero √© um quadrado perfeito. Um quadrado
perfeito √© um n√∫mero inteiro n√£o negativo que pode ser expresso como o quadrado de
outro n√∫mero inteiro. Ex.: 1, 4, 9...*/

int quadPerfeito(int num);

int main(){
    int num;
    printf("insira um valor inteiro: ");
    scanf("%d", &num);
    if(quadPerfeito(num)){
        printf("%d eh um quadrado perfeito\n", num);
    }else{
        printf("%d nao eh um quadrado perfeito\n",num);
    }
    return 0;
}

int quadPerfeito(int num){
    int raizInt = sqrt(num);
    if(num < 1){
        return 0;
    }else{
        if(raizInt * raizInt == num){
            return 1;
        }else{
            return 0;
        }
    }
}
```

## 5)

```c
#include <stdio.h>
#include <math.h>
const float pi = 3.141592653;

/*Fa√ßa uma fun√ß√£o e um programa de teste para o c√°lculo do volume de uma esfera. Sendo
que o raio √© passado por par√¢metro.*/

float volEsfera(float raio);

int main(){
    float raio, volume;
    printf("Insira o raio da esfera: ");
    scanf("%f", &raio);
    volume = volEsfera(raio);
    printf("O volume da esfera de raio %.2f eh %.2f unidades\n",raio, volume);
    return 0;
}

float volEsfera(float raio){
    float volume = pow(raio,3)*(4.0/3.0)*pi;
    return volume;
}
```

## 6)

```c
#include <stdio.h>

/*Fa√ßa uma fun√ß√£o que receba 3 n√∫meros inteiros como par√¢metro, representando horas,
minutos e segundos, e os converta em segundos.*/

int totalSeg(int horas, int minutos, int segundos);

int main(){
    int hor, min, seg, totalSegundo;
    printf("Insira o horario [hh mm ss]: ");
    scanf("%d %d %d", &hor, &min, &seg);
    totalSegundo = totalSeg(hor, min, seg);

    printf("Total em segundos eh %d\n", totalSegundo);
    return 0;
}

int totalSeg(int horas, int minutos, int segundos){
    int totalSegundos = horas*60*60 + minutos*60 + segundos; 
    return totalSegundos;
}
```

## 7)

```c
#include <stdio.h>

/*Fa√ßa uma fun√ß√£o que receba 3 n√∫meros inteiros como par√¢metro, representando horas,
minutos e segundos, e os converta em segundos.*/

int totalSeg(int horas, int minutos, int segundos);

int main(){
    int hor, min, seg, totalSegundo;
    printf("Insira o horario [hh mm ss]: ");
    scanf("%d %d %d", &hor, &min, &seg);
    totalSegundo = totalSeg(hor, min, seg);

    printf("Total em segundos eh %d\n", totalSegundo);
    return 0;
}

int totalSeg(int horas, int minutos, int segundos){
    int totalSegundos = horas*60*60 + minutos*60 + segundos; 
    return totalSegundos;
}
```

## 8)

```c
#include <stdio.h>
#include <math.h>

/*Sejam a e b os catetos de um triangulo, onde a hipotenusa √© obtida pela equa√ß√£o:
hipotenusa = ‚àöùëé2 + ùëè2. Fa√ßa uma fun√ß√£o que receba os valores de a e b e calcule o valor
da hipotenusa atrav√©s da equa√ß√£o.*/

float calculaHipotenusa(float catetoA, float catetoB);

int main(){
    float catetoA, catetoB, hipotenusa;
    printf("Insira os valores do cateto A: ");
    scanf("%f", &catetoA);
    printf("Insira os valores do cateto B: ");
    scanf("%f", &catetoB);

    hipotenusa = calculaHipotenusa(catetoA, catetoB);
    printf("O valor da hipotenusa eh %.2f\n",hipotenusa);
    return 0;
}

float calculaHipotenusa(float catetoA, float catetoB){
    float hipotenusa = sqrt(pow(catetoA,2) + pow(catetoB,2));
    return hipotenusa;
}
```

## 9)

```c
#include <stdio.h>
#include <math.h>
const float pi = 3.141592;

/*Fa√ßa uma fun√ß√£o que receba a altura e o raio de um cilindro circular e retorne o volume do
cilindro.*/

float volCilindro(float h, float r);

int main(){
    float raio, altura, volume;
    printf("Insira o valor do raio: ");
    scanf("%f", &raio);
    printf("Insira o valor da altura: ");
    scanf("%f", &altura);

    volume = volCilindro(raio, altura);
    printf("O volume do cilindro eh: %.2f unidades\n",volume);
    return 0;
}

float volCilindro(float r, float h){
    float vol = pi * pow(r,2) * h;
    return vol;
}
```

## 10)

```c
#include <stdio.h>

/*Fa√ßa uma fun√ß√£o que receba dois n√∫meros e retorne qual deles √© o maior*/

float maior(float h, float r);

int main(){
    float num1, num2;
    printf("Insira o valor 1: ");
    scanf("%f", &num1);
    printf("Insira o valor 2: ");
    scanf("%f", &num2);

    printf("O maior eh: %.2f\n",maior(num1,num2));
    return 0;
}

float maior(float a, float b){
    if(a>b) return a;
    else return b;
}
```

## 11)

```c
#include <stdio.h>
#include <math.h>
const float pi = 3.141592;

/*Elabore uma fun√ß√£o que receba tr√™s notas de um aluno como par√¢metros e uma letra. Se a
letra for A, a fun√ß√£o dever√° calcular a m√©dia aritm√©tica das notas do aluno; se for P, dever√°
calcular a m√©dia ponderada, com pesos 5, 3 e 2*/

float media(float a, float b, float c, char operacao);

int main(){
    float nota1, nota2, nota3, resultado;
    char operacao;

    printf("Insira as 3 notas: ");
    scanf("%f %f %f", &nota1, &nota2, &nota3);
    printf("Insira o tipo de media ['p' - ponderada] ou ['a' - aritmetica]: ");
    scanf(" %c",&operacao);

    resultado = media(nota1, nota2, nota3, operacao);

    if(resultado < 0)return 0;
    else printf("Media = %.2f\n",resultado);

    return 0;
}

float media(float a, float b, float c, char operacao){
    float resultado;
    switch (operacao)
    {
        case 'a':
        case 'A':
            resultado = (a+b+c)/3;
            return resultado;
            break;
        case 'p':
        case 'P':
            resultado = (a*5+b*3+c*2)/(5+3+2);
            return resultado;
            break;
        default:
            printf("Operacao invalida\n");
            return -1;
    }
}
```

## 12)

```c
#include <stdio.h>

/*Escreva uma fun√ß√£o que receba um n√∫mero inteiro maior do que zero e retorne a soma de
todos os seus algarismos. Por exemplo, ao n√∫mero 251 corresponder√° o valor 8 (2 + 5 + 1).*/

float somaAlgarismos(int x);

int main(){
    int num, soma;
    printf("Insira um valor inteiro maior que zero: ");
    scanf("%d",&num);
    
    if(num <= 0){
        printf("Numero invalido");
        return 0;
    }

    soma = somaAlgarismos(num);
    printf("A soma dos algarismos de %d eh: ",soma);

    return 0;
}

float somaAlgarismos(int x){
    int i = 1, soma = 0;
    while(x > 0){
        soma += x%10*i;
        x /= 10;
    }
    return soma;
}
```

## 13)

```c
#include <stdio.h>

/*Fa√ßa uma fun√ß√£o que receba dois valores num√©ricos e um s√≠mbolo. Este s√≠mbolo
representar√° a opera√ß√£o que se deseja efetuar com os n√∫meros. Se o s√≠mbolo for ‚Äò+‚Äô dever√°
ser realizada uma adi√ß√£o, se for ‚Äò‚Äì‚Äò uma subtra√ß√£o, se for ‚Äò*‚Äô uma multiplica√ß√£o e se for ‚Äò/‚Äô
ser√° efetuada uma divis√£o.*/

float calculadora(float a, float b, char operador);

int main(){
    float num1, num2, resultado;
    char operador;
    printf("Insira dois valores: ");
    scanf("%f %f",&num1,&num2);
    printf("Insira a operacao [+,-,*,/]: ");
    scanf(" %c",&operador);

    resultado = calculadora(num1, num2, operador);
    printf("%.2f %c %.2f = %.2f ",num1, operador, num2, resultado);

    return 0;
}

float calculadora(float a, float b, char operador){
    float resultado;
    switch (operador)
    {
        case '+':
            resultado = a + b;
            return resultado;
            break;
        case '-':
            resultado = a - b;
            return resultado;
            break;
        case '*':
            resultado = a * b;
            return resultado;
            break;
        case '/':
            resultado = a / b;
            return resultado;
            break;
        default:
            printf("Operador invalido\n");
            return 0;
    }
}
```

## 14)

```c
#include <stdio.h>

/*Fa√ßa uma fun√ß√£o que receba a dist√¢ncia em Km e a quantidade de litros de gasolina
consumidos por um carro em um percurso, calcule o consumo em Km/l e escreva uma
mensagem de acordo com a tabela abaixo:
CONSUMO (Km/l) MENSAGEM
menor que 8 Venda o carro!
entre 8 e 14 Econ√¥mico!
maior que 14 Super econ√¥mico!*/

void consumo(float km, float l);

int main(){
    float km, litros;
    printf("insira a distancia em km: ");
    scanf("%f",&km);
    printf("insira o consumo em L: ");
    scanf("%f",&litros);
    consumo(km,litros);
    return 0;
}

void consumo(float km, float l){
    float media = km/l;
    if(media < 8) printf("Venda o carro!\n");
    else if(media >= 8 && media <= 14) printf("Economico!\n");
    else printf("Super economico\n");
}
```

## 15)

```c
#include <stdio.h>

/*Crie um programa que receba tr√™s valores (obrigatoriamente maiores que zero),
representando as medidas dos tr√™s lados de um tri√¢ngulo. Elabore fun√ß√µes para:
a) Determinar se eles lados formam um tri√¢ngulo, sabendo que:
ÔÇ∑ O comprimento de cada lado de um tri√¢ngulo √© menor do que a soma dos outros
dois lados.
b) Determinar e mostrar o tipo de tri√¢ngulo, caso as medidas formem um tri√¢ngulo. Sendo
que:
ÔÇ∑ Chama-se equil√°tero o tri√¢ngulo que tem tr√™s lados iguais;
ÔÇ∑ Denominam-se is√≥sceles o tri√¢ngulo que tem o comprimento de dois lados iguais;
ÔÇ∑ Recebe o nome de escaleno o tri√¢ngulo que tem os tr√™s lados diferentes.*/

int formaTriangulo(float a,float b,float c);
void tipoTriangulo(float a,float b,float c);

int main(){
    float ladoA, ladoB, ladoC;

    printf("Insira as medidas dos 3 lados: ");
    scanf("%f %f %f",&ladoA, &ladoB, &ladoC);

    if(formaTriangulo(ladoA, ladoB, ladoC) == 0){
        printf("Lados nao formam um triangulo\n");
        return 0;
    }else{
        printf("Eh um triangulo ");
        tipoTriangulo(ladoA, ladoB, ladoC);
    }

    return 0;
}

int formaTriangulo(float a,float b,float c){
    if (a >= b + c || b >= a + c || c >= a + b) return 0;
    else return 1;
}

void tipoTriangulo(float a,float b,float c){
    if (a == b && b == c) printf("equilatero\n");
    else if (a == b || a == c || b == c) printf("isoceles\n");
    else printf("escaleno\n");
}
```

## 16)

```c
#include <stdio.h>

/*Fa√ßa uma fun√ß√£o chamada desenha_linha. Ele deve desenhar uma linha na tela usando uma
sequ√™ncia de s√≠mbolos de igual (Ex.: ========). A fun√ß√£o recebe por par√¢metro quantos
sinais de igual ser√£o mostrados.
*/

void desenhaLinha(int x);

int main(){
    int qtdIguais;

    printf("Insira o tamanho da linha: ");
    scanf("%d",&qtdIguais);

    desenhaLinha(qtdIguais);
    return 0;
}

void desenhaLinha(int x){
    for(int i=0; i< x; i++){
        printf("=");
    }
}
```

## 17)

```c
#include <stdio.h>

/*Fa√ßa uma fun√ß√£o que receba dois n√∫meros inteiros positivos por par√¢metro e retorne a
soma dos N n√∫meros inteiros existentes entre eles.*/

int somaEntreInteiros(int a, int b);

int main(){
    int num1, num2, total;

    printf("Insira dois valores inteiros positivos: ");
    scanf("%d %d",&num1, &num2);

    total = somaEntreInteiros(num1, num2);
    printf("A soma entre os valores (A,B) -exclusivo- eh: %d", total);
    return 0;
}

int somaEntreInteiros(int a, int b){
    int soma = 0;
    for(int i = a+1; i < b; i++){
        soma += i;
    }
    return soma;
}
```

## 18)

```c
#include <stdio.h>

/*Fa√ßa uma fun√ß√£o que receba por par√¢metro dois valores inteiros x e z. Calcule e retorne o
resultado de x^z para o programa principal. Aten√ß√£o n√£o utilize nenhuma fun√ß√£o pronta de
exponencia√ß√£o.*/

double pow(int x, int z);

int main(){
    int num1, num2;
    float total;

    printf("Insira o valor de X: ");
    scanf("%d",&num1);
    printf("Insira o valor de Z: ");
    scanf("%d", &num2);

    total = pow(num1, num2);
    printf("X^Z: %.4f", total);
    return 0;
}

double pow(int x, int z){
    float total = x;

    if(z == 0){
        total = 1;
    }else{
        if(z < 0){
            for(int i = 1; i < -z; i++){
             total *= x;
            }
            total = 1.0/total;
        }else{
            for(int i = 1; i < z; i++){
                total *= x;
            }
        }
    }
    return total;
}
```

## 19)

```c
#include <stdio.h>

/*Fa√ßa uma fun√ß√£o que receba um n√∫mero inteiro positivo n e calcule o seu fatorial, n!.*/

long long int factorial(int n);

int main(){
    int num;
    long long int total;

    printf("Insira um valor inteiro positivo: ");
    scanf("%d",&num);

    total = factorial(num);
    printf("%d! = %lld",num ,total);
    return 0;
}

long long int factorial(int n){
    long long int total = n;
    if(n==1){
        return 1;
    }else{
        total *= factorial(n-1);
    }
    return total;
}
```

## 20)

```c
#include <stdio.h>
#include <math.h>

/*Escreva uma fun√ß√£o para determinar a quantidade de n√∫meros primos abaixo de N*/

int qtdPrimos(int n);

int main(){
    int num, total;

    printf("Insira um valor inteiro positivo: ");
    scanf("%d",&num);
    total = qtdPrimos(num);
    printf("Existem %d primos ate %d\n", total, num);
    return 0;
}

int qtdPrimos(int n){
    int divisores,qtdPrimos = 2, raiz;

    if(n <= 2){
        return 0;
    }else if(n == 3){
        return 1;
    }
    for(int i = 5; i < n; i+=2){
        divisores = 2;
        raiz = sqrt(i);
        for(int j = 3; j <= raiz; j++){
            if(i%j == 0){
                divisores++;
                break;
            }
        }
        if(divisores == 2){
            qtdPrimos++;
        }
    }
    return qtdPrimos;
}
```

## 21)

```c
#include <stdio.h>
#include <math.h>

/*Crie uma fun√ß√£o que receba como par√¢metro um valor inteiro e gere como sa√≠da n linhas
com pontos de exclama√ß√£o, conforme o exemplo abaixo (para n = 5):*/

void excalamationPointTriangle(int n);

int main(){
    int num;

    printf("Insira a quantidade de linhas: ");
    scanf("%d",&num);
    excalamationPointTriangle(num);
    return 0;
}

void excalamationPointTriangle(int n){
    for(int i=0; i<n; i++){
        for(int j=1; j<=i+1; j++){
            printf("!");
    }
    printf("\n");
    }
}
```

## 23)

```c
#include <stdio.h>

/*Escreva uma fun√ß√£o que gera um tri√¢ngulo lateral de altura 2*n-1 e n largura. Por exemplo,
a sa√≠da para n = 4 seria:*/

void asteriscoTriangulo(int n);

int main(){
    int num;

    printf("Insira a quantidade de linhas: ");
    scanf("%d",&num);
    asteriscoTriangulo(num);
    return 0;
}

void asteriscoTriangulo(int n){
    int h = (2*n)-1, count = 0;
    for(int i=1; i<h+1; i++){
        if(i<=n){
            for(int j=1; j<=i; j++){
                printf("*");
            }
        }else{
            count++;
            for(int j=n-count; j>0; j--){
                printf("*");
        }
    }
    printf("\n");
    }
}
```

## 24)

```c
#include <stdio.h>

/*Escreva uma fun√ß√£o que gera um tri√¢ngulo de altura e lados n e base 2*n-1. Por exemplo, a
sa√≠da para n = 6 seria:*/

void desenhaTriangulo(int n);

int main(){
    int num;

    printf("Insira a quantidade de linhas: ");
    scanf("%d",&num);
    desenhaTriangulo(num);
    return 0;
}

void desenhaTriangulo(int n){
    int base = (2*n)-1, whiteSpace = base-1, asterisco = 1;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < base; j++){
            if(j<=whiteSpace/2 - asterisco || j>=whiteSpace/2 + asterisco){
                printf(" ");
            }else{
                printf("*");
            }
        }
        asterisco++;
        printf("\n");
    }
}
```