## 1)

```c
#include <stdio.h>

/*Faça um programa que leia 2 valores inteiros e chame uma função que
receba estas 2 variáveis e troque o seu conteúdo, i.e., esta função é
chamada passando duas variáveis A e B, por exemplo, e após a execução da
função, A conterá o valor de B e B terá o valor de A. Imprima os valores
antes e depois da troca.*/

void trocaValores(int *x, int *y);

int main(){
    int valor1, valor2;
    printf("Insira os valores 1 e 2: ");
    scanf("%d %d", &valor1, &valor2);
    printf("Valores antes da troca: V1 = %d e V2 = %d\n", valor1, valor2);
    trocaValores(&valor1, &valor2);
    printf("Valores apos a troca: V1 = %d e V2 = %d\n", valor1, valor2);
    return 0;
}

void trocaValores(int *x, int *y){
    int aux;
    aux = *x;
    *x = *y;
    *y = aux;
}
```

## 2)

```c
#include <stdio.h>

/*Faça um programa que leia dois valores inteiros e chame uma função que
receba estes 2 valores de entrada e retorne o maior valor na primeira
variável e o menor valor na segunda variável. Escreva o conteúdo das 2
variáveis na tela.*/

void maiorMenor(int *maior, int *menor);

int main(){
    int valor1, valor2;
    printf("Insira os valores 1 e 2: ");
    scanf("%d %d", &valor1, &valor2);
    maiorMenor(&valor1, &valor2);
    printf("O maior valor eh %d\nO menor valor eh %d\n", valor1, valor2);
    return 0;
}

void maiorMenor(int *maior, int *menor){
    int aux;
    if(*maior < *menor){
        aux = *maior;
        *maior = *menor;
        *menor = aux;
    }
}
```

## 3)

```c
#include <stdio.h>

/*Crie um programa que contenha uma função que permita passar por
parâmetro dois números inteiros A e B. A função deverá calcular a soma
entre estes dois números e armazenar o resultado na variável A. Esta função
não deverá possuir retorno, mas deverá modificar o valor do primeiro
parâmetro. Imprima os valores de A e B na função principal.*/

void soma(int *a, int *b);

int main(){
    int a, b;
    printf("Insira A e B: ");
    scanf("%d %d", &a, &b);
    soma(&a, &b);
    printf("A = %d\nB = %d\n", a, b);
    return 0;
}

void soma(int *a, int *b){
    *a += *b;
}
```

## 4)

```c
#include <stdio.h>

/*Faça um programa que leia três valores inteiros e chame uma função que
receba estes 3 valores de entrada e retorne eles ordenados, ou seja, o
menor valor na primeira variável, o segundo menor valor na variável do
meio, e o maior valor na última variável. A função deve retornar o valor 1 se
os três valores forem iguais e 0 se existirem valores diferentes. Exibir os
valores ordenados na tela.*/

int ordenar(int *a);

int main(){
    int valores[3], i;
    for(i = 0; i < 3; i++){
        printf("Insira o valor %d: ", i + 1);
        scanf("%d", &valores[i]);
    }
    
    ordenar(valores);

    for(i = 0; i < 3; i++){
        printf("Valor %d: %d", i + 1, valores[i]);
        printf("\n");

    }
    
    return 0;
}

int ordenar(int *arr){
    int i, pivo, j;
    if(arr[1] == arr[2] && arr[2] == arr[3]) return 1;
    for (i = 1; i < 3; i++) {
        pivo = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > pivo) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = pivo;
    }
    return 0;
}
```

## 5)

```c
#include <stdio.h>

void frac(float num, int *inteiro, float *frac);

int main(){
    int parteInteira;
    float num, parteFracionaria;

    printf("Insira um numero real: ");
    scanf("%f", &num);

    frac(num, &parteInteira, &parteFracionaria);
    printf("Parte inteira: %d\n", parteInteira);
    printf("Parte fracionaria: %.3f\n", parteFracionaria);
    return 0;
}

void frac(float num, int *inteiro, float *frac){
    *inteiro = (int)num;
    *frac = num - ((float)(*inteiro));
}
```

## 6)

```c
#include <stdio.h>
#define pi 3.14159    

/*Implemente uma função que calcule a área da superfície e o volume de uma
esfera de raio R. Essa função deve obedecer ao protótipo:
void calc_esfera(float R, float *area, float *volume);*/

void calc_esfera(float R, float *area, float *volume);

int main(){
    float r, area, volume;
    printf("Insira o valor do raio: ");
    scanf("%f", &r);

    calc_esfera(r, &area, &volume);

    printf("A esfera de raio %.2f tem area %.2f e volume %.2f", r, area, volume);
    
    return 0;
}

void calc_esfera(float R, float *area, float *volume){
    *area = 4*pi*R*R;
    *volume = 4.0/3.0 * pi * R * R * R; 
}
```

## 7)

```c
#include <stdio.h> 

/*Escreva uma função que aceita como parâmetro um array de inteiros com N
valores, e determina o maior elemento do array e o número de vezes que
este elemento ocorreu no array. Por exemplo, para um array com os
seguintes elementos: 5, 2, 15, 3, 7, 15, 8, 6, 15, a função deve retorna para
o programa que a chamou o valor 15 e o número 3 (indicando que o número
15 ocorreu 3 vezes). A função deve ser do tipo void.*/

void maiorValor(int *arr, int n, int *maior, int *vezes);

int main(){
    int i, maior, vezes, arr[10];
    for(i = 0; i < 10; i++){
        printf("Digite o %do elemento do array: ", i+1);
        scanf("%d", &arr[i]);
    }

    maiorValor(arr, 10, &maior, &vezes);
    printf("O maior valor do array eh %d, que aparece %d vezes.", maior, vezes);
    
    return 0;
}

void maiorValor(int *arr, int n, int *maior, int *vezes){
    int i;

    //encontra o maior valor
    *maior = arr[0];
    for(i = 0; i < n; i++){
        if(*maior < arr[i]) *maior = arr[i];
    }

    //conta quantas vezes o maior aparece
    *vezes = 0;
    for(i = 0; i < n; i++){
        if(arr[i] == *maior){
            *vezes += 1;
        }
    }
}
```

## 8)

```c
#include <stdio.h> 

/* Implemente uma função que receba como parâmetro um array de números
reais de tamanho N e retorne quantos números negativos há nesse array.
Essa função deve obedecer ao protótipo: int negativos(float *vet, int
N);*/

int negativos(float *vet, int N);

int main(){
    float arr[10];
    int i = 0;

    for(i = 0; i < 10; i++){
        printf("Digite o %do elemento do array: ", i+1);
        scanf("%f", &arr[i]);
    }

    printf("O array possui %d elementos negativos\n",negativos(arr, 10));
    return 0;
}

int negativos(float *vet, int N){
    int i, negativos = 0;

    for(i = 0; i < N; i++){
        if(vet[i] < 0) negativos++;
    }

    return negativos;
}
```

## 9)

```c
#include<stdio.h> 

/*Escreva um programa que declare um array de inteiros e um ponteiro para
inteiros. Associe o ponteiro ao array. Agora, some mais um (+1) a cada
posição do array usando o ponteiro (use *).*/

int main(){
    int arr[10];
    int *p_arr = arr;
    
    p_arr = arr;
    while(p_arr < arr + 10){
        printf("Insira um valor do array: ");
        scanf("%d", p_arr);
        (*p_arr)++;
        p_arr++;
    }

    p_arr = arr;
    while(p_arr < arr + 10){
        printf("%d\n", *p_arr);
        p_arr++;
    }

    return 0;
}
```

## 10)

```c
#include <stdio.h> 

/*Crie uma função para somar dois arrays. Esta função deve receber dois
arrays e retornar a soma em um terceiro array. Caso o tamanho do primeiro
e segundo array seja diferente então a função retornará ZERO (0). Caso a
função seja concluída com sucesso a mesma deve retornar o valor UM (1).
Utilize aritmética de ponteiros para manipulação do array*/

int somarArrays(int *arr1, int *arr2, int *arrres, int n1, int n2);

int main(){
    int arr1[5], arr2[5], res[5];

    //inserindo array 2
    printf("\nInserindo array 1:\n");
    for(int i = 0; i < 5; i++){
        printf("A1[%d]: ", i);
        scanf("%d", &arr1[i]);
    }

    //inserindo array 2
    printf("\nInserindo array 2:\n");
    for(int i = 0; i < 5; i++){
        printf("A2[%d]: ", i);
        scanf("%d", &arr2[i]);
    }
    
    somarArrays(arr1, arr2, res, 5, 5);

    //print array resultante
    printf("\nArray resultante:\n");
    for(int i = 0; i < 5; i++){
        printf("Res[%d] = %d\n", i, *(res+i));
    }
    return 0;
}

int somarArrays(int *arr1, int *arr2, int *res, int n1, int n2){
    if(n1 != n2) return 0;
    for(int i = 0; i < n1; i++){
        *(res+i) = *(arr1+i) + *(arr2+i);
    }
    return 1;
}
```

## 11)

```c
#include <stdio.h> 

/*Escreva uma função que retorna o maior valor de um array de tamanho N.
Escreva um programa que leia N valores inteiros, imprima o array com ‘k’
elementos por linha, e o maior elemento. O valor de ‘k’ também deve ser
fornecido pelo usuário.*/

int maior(int *arr1, int n);

int main(){
    int n = 5, arr[n], k, i, j, pos;
    for(i = 0; i < n; i++){
        printf("Insira A[%d]: ", i);
        scanf("%d", &arr[i]);
    }

    printf("Insira quantos elementos por linha: ");
    scanf("%d", &k);

    for(i = 0, pos = 0; i < n/k+1; i++){
        for(j = 0; j < k; j++){
            if(pos < n){
                printf("%d ", arr[pos]);
                pos++;
            }
        }
        printf("\n");
    }
    printf("O maior valor eh %d\n", maior(arr, n));

    return 0;
}
    
int maior(int *arr, int n){
    int maior = arr[0];
    for(int i = 0; i < n; i++){
        if(maior < arr[i]) maior = arr[i];                                                                              
    }
    return maior;
}
```

## 12)

```c
#include <stdio.h> 

/*Escreva uma função que receba um array de inteiros V e os endereços de
duas variáveis inteiras, min e max, e armazene nessas variáveis o valor
mínimo e máximo do array. Escreva também uma função main que use essa
função.*/

void maiorMenor(int *arr, int n, int *min, int *max);

int main(){
    int n = 5, arr[n], i, min, max;

    for(i = 0; i < n; i++){
        printf("Insira A[%d]: ", i);
        scanf("%d", &arr[i]);
    }

    maiorMenor(arr, n, &min, &max);
    printf("O menor valor do array eh %d\n", min);
    printf("O maior valor do array eh %d\n", max);
    return 0;
}
    
void maiorMenor(int *arr, int n, int *min, int *max){
    *min = arr[0];
    *max = arr[0];

    for(int i = 0; i < n; i++){
        if(*min < arr[i]) *min = arr[i];
        if(*max > arr[i]) *max = arr[i];
    }
}
```

## 13)

```c
#include <stdio.h> 

/*Faça um programa que possua uma função para:
 - ler 2 notas e retorná-las por parâmetro (chamar uma função dedicada a ler
2 notas válidas e que devolver os 2 números lidos);
 - calcular a média simples e a média ponderada e retorná-las por parâmetro,
onde a segunda nota tem peso 2: media_ponderada = (n1 + n2*2)/3
*/

void getNotes(float  *n1, float *n2);
float media(float *notas, char x);

int main(){
    float notas1[2];
    getNotes(&notas1[0], &notas1[1]);
    printf("Media simples: %.2f\n", media(notas1, 's'));
    printf("Media ponderada: %.2f\n", media(notas1, 'p'));
    return 0;
}
    
void getNotes(float *n1, float *n2){
    do{
        printf("Insira a nota 1: ");
        scanf("%f", n1);
    }while(*n1 < 0);

    do{
        printf("Insira a nota 2: ");
        scanf("%f", n2);
    }while(*n2 < 0);
}

float media(float *notas, char x){
    float soma, media;
    if(x == 's'){
        soma = notas[0] + notas[1];
        media = soma/2;
    }else if(x == 'p'){
        soma = notas[0] + notas[1]*2;
        media = soma/3;
    }
    return media;
}
```

## 14)

```c
#include <stdio.h>
#include <math.h>

/*Implemente uma função que calcule as raízes de uma equação do segundo
grau do tipo, Essa função deve ter como valor de retorno o número de raízes reais e
distintas da equação. Se existirem raízes reais, seus valores devem ser
armazenados nas variáveis apontadas por X1 e X2.*/

int quadratica(float *x1, float *x2, float a, float b, float c);

int main(){
    float x1, x2, a, b ,c;
    int qtdRaizes;

    printf("Insira o valor de a: ");
    scanf("%f", &a);
    printf("Insira o valor de b: ");
    scanf("%f", &b);
    printf("Insira o valor de c: ");
    scanf("%f", &c);

    qtdRaizes = quadratica(&x1, &x2, a, b, c);
    if(qtdRaizes == 0){
        printf("Nao existem  raizes reais\n");
    }else if(qtdRaizes == 1){
        printf("Raiz unica x1 = %.2f\n", x1);
    }else{
        printf("X1 = %.2f\n", x1);
        printf("X2 = %.2f\n", x2);
    }

}

int quadratica(float *x1, float *x2, float a, float b, float c){
    float delta, qtd = 0;

    delta = (b*b) - (4 * a * c);

    if(delta == 0){
        *x1 = (-b + sqrt(delta))/(2*a);
        *x2 = *x1;
        qtd += 1;
    }
    else if(delta > 0){
        *x1 = (-b + sqrt(delta))/(2*a);
        *x2 = (-b - sqrt(delta))/(2*a);
        qtd += 2;
        return qtd;
    }

    return qtd;
}
```